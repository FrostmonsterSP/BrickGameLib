/**
 * @file engine.h
 * @brief Библиотека для управления игровым процессом
 *
 * @details Библиотека engine.h предназначена для управления игровым процессом.
 * Она содержит функции для инициализации игры, старта, паузы, изменения
 * направления, изменения скорости, сброса, касания, заполнения строки, очистки
 * заполненных строк, изменения направления, изменения скорости, выхода, а также
 * вспомогательные функции, которые используются этими функциями.
 *
 * @dotfile engine_graph.dot
 * - `State0`: Начальное состояние
 * - `StateInit`: Инициализированное состояние (например, экран выбора настроек
 * перед игрой)
 * - `StateAction`: Состояние обработки действий пользователя
 * - `StateShift`: Состояние сдвига фигуры
 * - `StateIdle`: Бездействие (игра на паузе)
 * - `StateSpawn`: Появление новой фигуры
 */
#ifndef ENGINE_H
#define ENGINE_H

#define FIELD_HEIGHT 20  ///< Высота игрового поля в клетках
#define FIELD_WIDTH 10  ///< Ширина игрового поля в клетках

#define NEXT_HEIGHT 4  ///< Высота поля "следующая" в клетках
#define NEXT_WIDTH 4   ///< Ширина поля "следующая" в клетках

/**
 * @brief Действия пользователя
 *
 * Определяет возможные действия пользователя во время игры.
 */
typedef enum {
  Start,      ///< Начать игру
  Pause,      ///< Поставить игру на паузу
  Terminate,  ///< Завершить игру
  Left,       ///< Сдвиг фигуры влево
  Right,      ///< Сдвиг фигуры вправо
  Up,         ///< Поворот фигуры
  Down,       ///< Ускорение падения фигуры
  Action,  ///< Специальное действие (например, моментальное падение)
} UserAction_t;

/**
 * @brief Структура, содержащая информацию об игре
 *
 * Содержит текущее состояние игрового поля, уровень, очки и другую информацию.
 */
typedef struct {
  int field[FIELD_HEIGHT][FIELD_WIDTH];  ///< Игровое поле
  int **next;      ///< Указатель на следующую фигуру
  int score;       ///< Текущие очки
  int high_score;  ///< Рекорд
  int level;       ///< Текущий уровень
  int speed;       ///< Текущая скорость игры
  int state;  ///< Текущее состояние игры
} GameInfo_t;

/**
 * @brief Обработка ввода пользователя
 *
 * Функция принимает действие пользователя и генерирует соответствующее игровое
 * событие. В зависимости от переданного действия вызывается соответствующая
 * функция для обработки событий, таких как начало игры, пауза, сдвиги фигур и
 * другие.
 *
 * @param action Действие пользователя, которое нужно обработать.
 */
void userInput(UserAction_t action);

/**
 * @brief Обновление текущего состояния игры
 *
 * Функция обновляет текущее состояние игры в зависимости от игрового состояния
 * и событий. Если состояние игры требует генерации нового события (например,
 * тик таймера или касание фигуры дна), оно обрабатывается. Если таймер доходит
 * до нуля, генерируется событие тика. Возвращает указатель на обновлённое
 * состояние игры.
 *
 * @return const GameInfo_t* Указатель на структуру с текущей информацией о
 * состоянии игры.
 */
const GameInfo_t *updateCurrentState(void);

#endif  // ENGINE_H
